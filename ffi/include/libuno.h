//
// Copyright 2021 WithUno, Inc.
// SPDX-License-Identifier: AGPL-3.0-only
//


#ifndef uno_ffi_h
#define uno_ffi_h

#pragma once

// ⚠️
// Warning, this file is autogenerated by cbindgen. Modifications should be
// made to the source Rust files in ../src. Do not manually modify this file.


#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>


typedef struct Option_UnoShare Option_UnoShare;

typedef struct Vec_GroupShare Vec_GroupShare;

typedef struct Vec_Share Vec_Share;

/**
 *
 * Opaque array containing share metadata. Get a member share by index using
 * `uno_get_member_share_by_index`.
 *
 */
typedef struct UnoMemberShares
{
  struct Vec_Share vec;
} UnoMemberShares;

/**
 *
 * A GroupSplit represents one of the group splits requested during the split
 * call. For now, there is only ever one. But there can be up to 16 so the
 * value is returned in a list.
 *
 */
typedef struct UnoGroupSplit
{
  uint16_t group_id;
  uint8_t iteration_exponent;
  uint8_t group_index;
  uint8_t group_threshold;
  uint8_t group_count;
  /**
   * The number of shares from this group required to reconstitue the group
   * secret.
   */
  uint8_t member_threshold;
  /**
   * Total number of member_shares
   */
  uint8_t share_count;
  /**
   * The constituent member shares. Acquire one of these with
   * `uno_get_gorup_share_by_index`.
   */
  const struct UnoMemberShares *member_shares;
} UnoGroupSplit;

/**
 *
 * A SplitResult is the output of successfully running `uno_s39_split` on an
 * UnoId. The result is a list of GroupSplits, but for now there is only ever
 * one. Generally, there can be up to 16 so the value is returned as an opaque
 * list.
 *
 */
typedef struct UnoSplitResult
{
  struct Vec_GroupShare groups;
} UnoSplitResult;

/**
 *
 * A GroupSpec is a tuple of (threshold, total) shares in a given s39 group
 * split. For instance, if you want a group go be split into 3 pieces, two
 * of which are requred to reconstitute the group secret, you'd pass (2, 3).
 *
 */
typedef struct UnoGroupSpec
{
  int32_t threshold;
  int32_t total;
} UnoGroupSpec;

/**
 *
 * Copy the share as an s39 mnemonic string of 33 words.
 *
 */
int32_t uno_copy_share_data(void);

/**
 *
 * Free a previously allocated GroupSplit returned by
 * `uno_get_group_from_split_result`.
 *
 */
void uno_free_group_split(struct UnoGroupSplit *id);

/**
 *
 * Free a previously allocated UnoId from `uno_id_from_bytes`.
 *
 */
void uno_free_id(UnoId *id);

/**
 *
 * Free a previously allocated SplitResult from `uno_s39_split`.
 *
 */
void uno_free_split_result(struct UnoSplitResult *id);

/**
 *
 * uno_get_group_from_split_result
 *
 */
int32_t uno_get_group_from_split_result(const struct UnoSplitResult *maybe_splits,
                                        size_t index,
                                        struct UnoGroupSplit *group_split);

/**
 *
 * Returns the actual member share by index.
 *
 */
int32_t uno_get_share_by_index(const struct UnoMemberShares *shares,
                               uint8_t idx,
                               struct Option_UnoShare out);

/**
 *
 * Create an uno id struct from a 32 byte seed data array. The caller is
 * responsible calling `uno_id_free` on the returned struct once finished.
 *
 */
UnoId *uno_id_from_bytes(const uint8_t *bytes, size_t len);

/**
 *
 * See s39::combine
 *
 *
 */
int32_t uno_s39_combine(const uint8_t *shares_buffer,
                        size_t nparts,
                        size_t part_len,
                        UnoId *uno_id);

/**
 *
 * See s39::split
 *
 * Rather than an array of tuples, the caller provides an array of GroupSpec
 * structs. The group_threshold is fixed at 1 so this parameter is currently
 * unused.
 *
 */
int32_t uno_s39_split(const UnoId *maybe_id,
                      size_t group_threshold,
                      size_t group_total,
                      struct UnoGroupSpec **group_specs,
                      struct UnoSplitResult *split);

#endif /* uno_ffi_h */
